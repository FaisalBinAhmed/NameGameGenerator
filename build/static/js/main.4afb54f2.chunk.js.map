{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","letter","setLetter","word","setWord","time","setTime","bg","setBg","React","value","setValue","useStyles","makeStyles","root","minWidth","maxWidth","margin","backgroundColor","marginTop","button","height","marginLeft","form","timer","text","color","display","text2","text3","visibility","target","banglaLetters","useEffect","setInterval","clearInterval","classes","className","Paper","FormControl","component","FormLabel","RadioGroup","aria-label","name","onChange","event","FormControlLabel","control","Radio","label","Typography","variant","Button","onClick","a","String","fromCharCode","Math","floor","random","length","b","d","replace","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UA+QeA,MAnQf,WAAgB,IAAD,EACcC,mBAAS,KADvB,mBACPC,EADO,KACCC,EADD,OAEUF,mBAAS,IAFnB,mBAEPG,EAFO,KAEDC,EAFC,OAGUJ,mBAAS,IAHnB,mBAGPK,EAHO,KAGDC,EAHC,OAIMN,mBAAS,OAJf,mBAIPO,EAJO,KAIHC,EAJG,OAKYC,IAAMT,SAAS,WAL3B,mBAKPU,EALO,KAKAC,EALA,KAWRC,EAAYC,YAAW,CAC5BC,KAAM,CACLC,SAAU,IACVC,SAAU,KACVC,OAAQ,SACRC,gBAAiBX,EACjBY,UAAW,IAEZC,OAAQ,CACPD,UAAW,GACXE,OAAQ,GACRL,SAAU,IACVC,OAAQ,SACRK,WAAY,QAEbC,KAAM,CACLJ,UAAW,GACXG,WAAY,IAEbE,MAAO,CACNF,WAAY,QAEbG,KAAM,CACLC,MAAO,UACPC,QAAS,UAEVC,MAAO,CACNF,MAAO,UACPC,QAAS,UAEVE,MAAO,CACNF,QAAS,SACTG,WAAuB,MAAX7B,EAAiB,SAAW,aAIpC8B,EAAS,CACd,YACA,aACA,UACA,QACA,QACA,YACA,YACA,SACA,YACA,aACA,UACA,cACA,UACA,SACA,SACA,SACA,YACA,aACA,aACA,aACA,SACA,cACA,aACA,aACA,sBACA,kBACA,SACA,YACA,eACA,kBACA,kBACA,SACA,cACA,cACA,mBACA,cACA,iBACA,uBACA,eACA,aACA,6BACA,eACA,mBACA,eACA,qBACA,yBACA,eACA,cACA,qBACA,QACA,cACA,WACA,UACA,UACA,2BACA,cACA,oBACA,gBACA,eACA,qBACA,uCACA,iBACA,qBACA,0BACA,gBACA,iBACA,mBACA,mBACA,gBACA,kBACA,sBACA,kBACA,uBACA,cACA,gBACA,oBACA,kBACA,qBACA,qBACA,oBACA,gBACA,yBACA,cACA,SACA,8BACA,oBAGKC,EAAgB,CACrB,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UAoBDC,qBAAU,WACT,IAAMT,EAAQnB,EAAO,GAAK6B,aAAY,kBAAM5B,EAAQD,EAAO,KAAI,KAO/D,OANa,KAATA,GACHG,EAAM,OAEM,IAATH,GAAuB,KAATF,GACjBK,EAAM,WAEA,kBAAM2B,cAAcX,MACzB,CAACnB,IAEJ,IAAM+B,EAAUxB,IAEhB,OACC,yBAAKyB,UAAU,OACd,kBAACC,EAAA,EAAD,CAAOD,UAAWD,EAAQtB,MACzB,kBAACyB,EAAA,EAAD,CAAaC,UAAU,WAAWH,UAAWD,EAAQb,MACpD,kBAACkB,EAAA,EAAD,CAAWD,UAAU,UAArB,oBACA,kBAACE,EAAA,EAAD,CACCC,aAAW,aACXC,KAAK,OACLlC,MAAOA,EACPmC,SAzNgB,SAACC,GACrBnC,EAASmC,EAAMf,OAAOrB,SAyNlB,kBAACqC,EAAA,EAAD,CACCrC,MAAM,UACNsC,QAAS,kBAACC,EAAA,EAAD,MACTC,MAAM,YAEP,kBAACH,EAAA,EAAD,CACCrC,MAAM,SACNsC,QAAS,kBAACC,EAAA,EAAD,MACTC,MAAM,aAIT,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKf,UAAWD,EAAQb,MAC3C,yBAAKc,UAAWD,EAAQX,MAAOtB,GAAY,IAC3C,yBAAKkC,UAAWD,EAAQP,OAAxB,oBACA,yBAAKQ,UAAWD,EAAQR,OAAQ3B,IAIjC,kBAACoD,EAAA,EAAD,CACChB,UAAWD,EAAQhB,OACnBM,MAAM,UACN0B,QAAQ,YACRE,QA/DkB,WACrB,IAAIC,EACU,YAAV7C,IACH6C,EAAIC,OAAOC,aAAa,GAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,YAEhC,WAAVlD,IACH6C,EAAIvB,EAAc0B,KAAKC,MAAMD,KAAKE,SAAW5B,EAAc6B,UAG5D,IAAMC,EAAI/B,EAAO2B,KAAKC,MAAMD,KAAKE,SAAW7B,EAAO8B,SAE7CE,EAAID,EAAEE,QAAQ,IAAK,IACzB5D,EAAQ2D,GACRD,EAAEG,SAAS,KAAO/D,EAAU,KAAOA,EAAUqD,GAC7CjD,EAAQ,MA6CN,YAOA,kBAAC6C,EAAA,EAAD,CAAYC,QAAQ,KAAKf,UAAWD,EAAQZ,OAC1CnB,MC5Pc6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4afb54f2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Button, Typography, Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\n\nimport \"./App.css\";\n\nfunction App() {\n\tconst [letter, setLetter] = useState(\" \");\n\tconst [word, setWord] = useState(\"\");\n\tconst [time, setTime] = useState(30);\n\tconst [bg, setBg] = useState(\"#ff\");\n\tconst [value, setValue] = React.useState(\"English\");\n\n\tconst handleChange = (event) => {\n\t\tsetValue(event.target.value);\n\t};\n\n\tconst useStyles = makeStyles({\n\t\troot: {\n\t\t\tminWidth: 275,\n\t\t\tmaxWidth: 1200,\n\t\t\tmargin: \"0 auto\",\n\t\t\tbackgroundColor: bg,\n\t\t\tmarginTop: 20,\n\t\t},\n\t\tbutton: {\n\t\t\tmarginTop: 80,\n\t\t\theight: 80,\n\t\t\tmaxWidth: 200,\n\t\t\tmargin: \"0 auto\",\n\t\t\tmarginLeft: \"25vw\",\n\t\t},\n\t\tform: {\n\t\t\tmarginTop: 30,\n\t\t\tmarginLeft: 30,\n\t\t},\n\t\ttimer: {\n\t\t\tmarginLeft: \"25vw\",\n\t\t},\n\t\ttext: {\n\t\t\tcolor: \"#3F51B5\",\n\t\t\tdisplay: \"inline\",\n\t\t},\n\t\ttext2: {\n\t\t\tcolor: \"#4CAF50\",\n\t\t\tdisplay: \"inline\",\n\t\t},\n\t\ttext3: {\n\t\t\tdisplay: \"inline\",\n\t\t\tvisibility: letter === \" \" ? \"hidden\" : \"visible\",\n\t\t},\n\t});\n\n\tconst target = [\n\t\t\"Boy names\",\n\t\t\"Girl names\",\n\t\t\"Animals\",\n\t\t\"Birds\",\n\t\t\"Trees\",\n\t\t\"Celebrity\",\n\t\t\"Countries\",\n\t\t\"Cities\",\n\t\t\"Insects *\",\n\t\t\"Capitals *\",\n\t\t\"Singers\",\n\t\t\"Politicians\",\n\t\t\"Flowers\",\n\t\t\"Fruits\",\n\t\t\"Rivers\",\n\t\t\"Actors\",\n\t\t\"Actresses\",\n\t\t\"Airlines *\",\n\t\t\"Inventions\",\n\t\t\"Scientists\",\n\t\t\"Movies\",\n\t\t\"Discoveries\",\n\t\t\"Body Parts\",\n\t\t\"Car Brands\",\n\t\t\"Smartphone brands *\",\n\t\t\"Laptop brands *\",\n\t\t\"Sports\",\n\t\t\"Atheletes\",\n\t\t\"Watch brands\",\n\t\t\"Luxary Brands *\",\n\t\t\"Clothe makers *\",\n\t\t\"Drinks\",\n\t\t\"Food dishes\",\n\t\t\"TV channels\",\n\t\t\"Bathroom items *\",\n\t\t\"House Items\",\n\t\t\"Kitchen item *\",\n\t\t\"Building materials *\",\n\t\t\"Furnitures *\",\n\t\t\"Diseases *\",\n\t\t\"Meena cartoon characters *\",\n\t\t\"Tool names *\",\n\t\t\"Famous Cartoon *\",\n\t\t\"Fast foods *\",\n\t\t\"Muslim Countries *\",\n\t\t\"Oscar winning movies *\",\n\t\t\"Meat types *\",\n\t\t\"Religions *\",\n\t\t\"Famous buildings *\",\n\t\t\"Poets\",\n\t\t\"Dictators *\",\n\t\t\"Queens *\",\n\t\t\"Kings *\",\n\t\t\"Chips *\",\n\t\t\"Mobile phone operators *\",\n\t\t\"Festivals *\",\n\t\t\"Breakfast foods *\",\n\t\t\"Dance types *\",\n\t\t\"Song types *\",\n\t\t\"Football players *\",\n\t\t\"Vaccines/ টিকা *\",\n\t\t\"Examinations *\",\n\t\t\"Bald celebrities *\",\n\t\t\"Famous movie villains *\",\n\t\t\"Red animals *\",\n\t\t\"Blue flowers *\",\n\t\t\"Yellow flowers *\",\n\t\t\"Computer parts *\",\n\t\t\"Small tress *\",\n\t\t\"Water animals *\",\n\t\t\"Television brands *\",\n\t\t\"Hot day items *\",\n\t\t\"Food for cold days *\",\n\t\t\"Car parts *\",\n\t\t\"Surah names *\",\n\t\t\"Social networks *\",\n\t\t\"Chatting apps *\",\n\t\t\"Alcoholic drinks *\",\n\t\t\"Cola drink names *\",\n\t\t\"Card game types *\",\n\t\t\"Board games *\",\n\t\t\"Foreign street foods *\",\n\t\t\"Cosmetics *\",\n\t\t\"Organs\",\n\t\t\"Expensive foods (2000tk+) *\",\n\t\t\"Children songs *\",\n\t];\n\tconst banglaTarget = [];\n\tconst banglaLetters = [\n\t\t\"অ\",\n\t\t\"আ\",\n\t\t\"ই\",\n\t\t\"ঈ\",\n\t\t\"উ\",\n\t\t\"ঊ\",\n\t\t\"ঋ\",\n\t\t\"এ\",\n\t\t\"ঐ\",\n\t\t\"ও\",\n\t\t\"ঔ\",\n\t\t\"ক\",\n\t\t\"খ\",\n\t\t\"গ\",\n\t\t\"ঘ\",\n\t\t\"ঙ\",\n\t\t\"চ\",\n\t\t\"ছ\",\n\t\t\"জ\",\n\t\t\"ঝ\",\n\t\t\"ঞ\",\n\t\t\"ট\",\n\t\t\"ঠ\",\n\t\t\"ড\",\n\t\t\"ঢ\",\n\t\t\"ণ\",\n\t\t\"ত\",\n\t\t\"থ\",\n\t\t\"দ\",\n\t\t\"ধ\",\n\t\t\"ন\",\n\t\t\"প\",\n\t\t\"ফ\",\n\t\t\"ব\",\n\t\t\"ভ\",\n\t\t\"ম,\",\n\t\t\"য\",\n\t\t\"র\",\n\t\t\"ল\",\n\t\t\"শ\",\n\t\t\"ষ\",\n\t\t\"স\",\n\t\t\"হ\",\n\t\t\"ড়\",\n\t\t\"ঢ়\",\n\t\t\"য়\",\n\t];\n\n\tconst generateLater = () => {\n\t\tlet a;\n\t\tif (value === \"English\") {\n\t\t\ta = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n\t\t}\n\t\tif (value === \"Bangla\") {\n\t\t\ta = banglaLetters[Math.floor(Math.random() * banglaLetters.length)];\n\t\t}\n\n\t\tconst b = target[Math.floor(Math.random() * target.length)];\n\t\t// const c = banglaLetters[Math.floor(Math.random() * target.length)];\n\t\tconst d = b.replace(\"*\", \"\");\n\t\tsetWord(d);\n\t\tb.includes(\"*\") ? setLetter(\" \") : setLetter(a);\n\t\tsetTime(30);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = time > 0 && setInterval(() => setTime(time - 1), 1000);\n\t\tif (time === 30) {\n\t\t\tsetBg(\"#ff\");\n\t\t}\n\t\tif (time === 0 && word !== \"\") {\n\t\t\tsetBg(\"#F44336\");\n\t\t}\n\t\treturn () => clearInterval(timer);\n\t}, [time]);\n\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Paper className={classes.root}>\n\t\t\t\t<FormControl component=\"fieldset\" className={classes.form}>\n\t\t\t\t\t<FormLabel component=\"legend\">Select Language:</FormLabel>\n\t\t\t\t\t<RadioGroup\n\t\t\t\t\t\taria-label=\"LangSwitch\"\n\t\t\t\t\t\tname=\"lang\"\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonChange={handleChange}>\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tvalue=\"English\"\n\t\t\t\t\t\t\tcontrol={<Radio />}\n\t\t\t\t\t\t\tlabel=\"English\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tvalue=\"Bangla\"\n\t\t\t\t\t\t\tcontrol={<Radio />}\n\t\t\t\t\t\t\tlabel=\"Bangla\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</RadioGroup>\n\t\t\t\t</FormControl>\n\t\t\t\t<Typography variant=\"h2\" className={classes.form}>\n\t\t\t\t\t<div className={classes.text}>{word}</div>{\" \"}\n\t\t\t\t\t<div className={classes.text3}>with the letter </div>\n\t\t\t\t\t<div className={classes.text2}>{letter}</div>\n\t\t\t\t</Typography>\n\t\t\t\t{/* <Typography variant=\"h2\">The word is: {word}</Typography> */}\n\n\t\t\t\t<Button\n\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tonClick={generateLater}>\n\t\t\t\t\tGenerate\n\t\t\t\t</Button>\n\t\t\t\t<Typography variant=\"h1\" className={classes.timer}>\n\t\t\t\t\t{time}\n\t\t\t\t</Typography>\n\t\t\t</Paper>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}