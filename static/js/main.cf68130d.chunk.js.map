{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","letter","setLetter","word","setWord","time","setTime","bg","setBg","useStyles","makeStyles","root","minWidth","maxWidth","margin","backgroundColor","button","marginTop","height","target","useEffect","timer","setInterval","clearInterval","classes","className","Paper","Typography","variant","Button","color","onClick","a","String","fromCharCode","Math","floor","random","b","length","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSA0GeA,MAnGf,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACPC,EADO,KACCC,EADD,OAEUF,mBAAS,IAFnB,mBAEPG,EAFO,KAEDC,EAFC,OAGUJ,mBAAS,IAHnB,mBAGPK,EAHO,KAGDC,EAHC,OAIMN,mBAAS,OAJf,mBAIPO,EAJO,KAIHC,EAJG,KAMRC,EAAYC,YAAW,CAC5BC,KAAM,CACLC,SAAU,IACVC,SAAU,KACVC,OAAQ,SACRC,gBAAiBR,GAElBS,OAAQ,CACPC,UAAW,IACXC,OAAQ,GACRL,SAAU,IACVC,OAAQ,YAIJK,EAAS,CACd,WACA,YACA,UACA,QACA,QACA,YACA,YACA,SACA,UACA,WACA,UACA,cACA,UACA,SACA,SACA,SACA,YACA,WACA,aACA,aACA,SACA,cACA,aACA,aACA,sBACA,kBACA,SACA,YACA,eACA,gBACA,gBACA,SACA,cACA,eAYDC,qBAAU,WACT,IAAMC,EAAQhB,EAAO,GAAKiB,aAAY,kBAAMhB,EAAQD,EAAO,KAAI,KAO/D,OANa,KAATA,GACHG,EAAM,OAEM,IAATH,GAAuB,KAATF,GACjBK,EAAM,OAEA,kBAAMe,cAAcF,MACzB,CAAChB,IAEJ,IAAMmB,EAAUf,IAEhB,OACC,yBAAKgB,UAAU,OACd,kBAACC,EAAA,EAAD,CAAOD,UAAWD,EAAQb,MACzB,kBAACgB,EAAA,EAAD,CAAYC,QAAQ,MAApB,kBAAyC3B,GACzC,kBAAC0B,EAAA,EAAD,CAAYC,QAAQ,MAApB,gBAAuCzB,GAEvC,kBAAC0B,EAAA,EAAD,CACCJ,UAAWD,EAAQR,OACnBc,MAAM,UACNF,QAAQ,YACRG,QAhCkB,WACrB,IAAMC,EAAIC,OAAOC,aAAa,GAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,WAE7CC,EAAInB,EAAOgB,KAAKC,MAAMD,KAAKE,SAAWlB,EAAOoB,SACnDnC,EAAQkC,GACRA,EAAEE,SAAS,KAAOtC,EAAU,KAAOA,EAAU8B,GAC7C1B,EAAQ,MAsBN,YAOA,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAAMvB,MCxFVoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf68130d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { Button, Typography, Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"./App.css\";\n\nfunction App() {\n\tconst [letter, setLetter] = useState(\"\");\n\tconst [word, setWord] = useState(\"\");\n\tconst [time, setTime] = useState(30);\n\tconst [bg, setBg] = useState(\"#ff\");\n\n\tconst useStyles = makeStyles({\n\t\troot: {\n\t\t\tminWidth: 275,\n\t\t\tmaxWidth: 1200,\n\t\t\tmargin: \"0 auto\",\n\t\t\tbackgroundColor: bg,\n\t\t},\n\t\tbutton: {\n\t\t\tmarginTop: 200,\n\t\t\theight: 80,\n\t\t\tmaxWidth: 200,\n\t\t\tmargin: \"0 auto\",\n\t\t},\n\t});\n\n\tconst target = [\n\t\t\"Boynames\",\n\t\t\"Girlnames\",\n\t\t\"Animals\",\n\t\t\"Birds\",\n\t\t\"Trees\",\n\t\t\"Celebrity\",\n\t\t\"Countries\",\n\t\t\"Cities\",\n\t\t\"Insects\",\n\t\t\"Capitals\",\n\t\t\"Singers\",\n\t\t\"Politicians\",\n\t\t\"Flowers\",\n\t\t\"Fruits\",\n\t\t\"Rivers\",\n\t\t\"Actors\",\n\t\t\"Actresses\",\n\t\t\"Airlines\",\n\t\t\"Inventions\",\n\t\t\"Scientists\",\n\t\t\"Movies\",\n\t\t\"Discoveries\",\n\t\t\"Body Parts\",\n\t\t\"Car Brands\",\n\t\t\"Smartphone brands *\",\n\t\t\"Laptop brands *\",\n\t\t\"Sports\",\n\t\t\"Atheletes\",\n\t\t\"Watch brands\",\n\t\t\"Luxary Brands\",\n\t\t\"Clothe makers\",\n\t\t\"Drinks\",\n\t\t\"Food dishes\",\n\t\t\"TV channels\",\n\t];\n\n\tconst generateLater = () => {\n\t\tconst a = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n\n\t\tconst b = target[Math.floor(Math.random() * target.length)];\n\t\tsetWord(b);\n\t\tb.includes(\"*\") ? setLetter(\" \") : setLetter(a);\n\t\tsetTime(30);\n\t};\n\n\tuseEffect(() => {\n\t\tconst timer = time > 0 && setInterval(() => setTime(time - 1), 1000);\n\t\tif (time === 30) {\n\t\t\tsetBg(\"#ff\");\n\t\t}\n\t\tif (time === 0 && word !== \"\") {\n\t\t\tsetBg(\"red\");\n\t\t}\n\t\treturn () => clearInterval(timer);\n\t}, [time]);\n\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Paper className={classes.root}>\n\t\t\t\t<Typography variant=\"h1\">The letter is: {letter}</Typography>\n\t\t\t\t<Typography variant=\"h1\">The word is: {word}</Typography>\n\n\t\t\t\t<Button\n\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tonClick={generateLater}>\n\t\t\t\t\tGenerate\n\t\t\t\t</Button>\n\t\t\t\t<Typography variant=\"h1\">{time}</Typography>\n\t\t\t</Paper>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}